import{_ as a,h as e,o as t,aa as o}from"./chunks/framework.CR3igpBK.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"workflow/chrome/debugger.md","filePath":"workflow/chrome/debugger.md","lastUpdated":1677053908000}'),i={name:"workflow/chrome/debugger.md"},r=o(`<p><a href="https://developers.google.com/web/tools/chrome-devtools/?hl=zh-cn" target="_blank" rel="noreferrer">developers</a> Open Chrome DevTools Ctrl+Shift+I (Windows) 或 Cmd+Opt+I (Mac)</p><h2 id="console-log" tabindex="-1">console.log({}) <a class="header-anchor" href="#console-log" aria-label="Permalink to &quot;console.log({})&quot;">​</a></h2><p>在使用 console.log();的时候，不仅仅打印变量，而是要打印对象，用大括号({})将变量包围起来。这样的优点是不仅会把变量的值打印，同时还会将变量名打印出来。 <img src="https://cdn.nlark.com/yuque/0/2020/png/292785/1607917242655-d693f0ce-9779-4d02-a987-e9cb03d67fe0.png#height=330&amp;id=sCa6T&amp;originHeight=330&amp;originWidth=1014&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1014" alt=""></p><h2 id="console-table" tabindex="-1">console.table <a class="header-anchor" href="#console-table" aria-label="Permalink to &quot;console.table&quot;">​</a></h2><p>使用 console.table 来打印多条目数据 <img src="https://cdn.nlark.com/yuque/0/2020/png/292785/1607917242720-dc89e7ca-69de-49e8-b794-dcb951ef005f.png#height=646&amp;id=LcsTU&amp;originHeight=646&amp;originWidth=2558&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=2558" alt=""></p><h2 id="_0" tabindex="-1">$0 <a class="header-anchor" href="#_0" aria-label="Permalink to &quot;$0&quot;">​</a></h2><p>如果你想引用某个 DOM 元素，使用$0。$0 指向你当前在 Element 中选中的元素。如果指定了$0，$1 指向之前选中的元素。以此类推，直到$4 都可以使用。</p><h2 id="geteventlisteners" tabindex="-1">getEventListeners() <a class="header-anchor" href="#geteventlisteners" aria-label="Permalink to &quot;getEventListeners()&quot;">​</a></h2><p>getEventListeners(domElement) 返回在 DOM 元素上注册的所有的事件。请看下面的例子：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/292785/1607917242792-c89d12be-4541-49cd-a655-ee863c53459e.gif#height=391&amp;id=YKrRQ&amp;originHeight=391&amp;originWidth=673&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=673" alt=""></p><h2 id="复制-javascript-变量-copy-obj" tabindex="-1">复制 JavaScript 变量 copy(obj) <a class="header-anchor" href="#复制-javascript-变量-copy-obj" aria-label="Permalink to &quot;复制 JavaScript 变量 copy(obj)&quot;">​</a></h2><p>copy(anything) 是一个很有用的工具函数方便你将任何东西拷贝到系统的粘贴板暂存。 给 copy 函数传入一个没有格式的 JSON，会返回格式化的结果： <img src="https://cdn.nlark.com/yuque/0/2020/gif/292785/1607917242933-36947c55-06d1-4263-912f-eebc5b34b9f7.gif#height=705&amp;id=GNcOh&amp;originHeight=705&amp;originWidth=1213&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1213" alt=""></p><h2 id="暂停-ui-在-hover-状态下的展示结果" tabindex="-1">暂停 UI 在 Hover 状态下的展示结果 <a class="header-anchor" href="#暂停-ui-在-hover-状态下的展示结果" aria-label="Permalink to &quot;暂停 UI 在 Hover 状态下的展示结果&quot;">​</a></h2><p>我们很难去检查一个只有在 Hover 状态下展示的元素。比如，如何去检查一个 tooltip？如果你右键并选择检查，元素已经消失了。那么有办法吗？ (1)打开 sources 面板 (2)显示 tooltip (3)使用快捷键来暂停脚本执行(将鼠标停留在暂停的图标上查看快捷键) (4)回到 Elements 面板，然后像通常一样去检查元素 <img src="https://cdn.nlark.com/yuque/0/2020/gif/292785/1607917244001-126ce8ca-0ac6-4000-9f25-d8b5c487fc51.gif#height=566&amp;id=CmVgd&amp;originHeight=566&amp;originWidth=1056&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1056" alt=""></p><h2 id="breakpoint" tabindex="-1">breakPoint <a class="header-anchor" href="#breakpoint" aria-label="Permalink to &quot;breakPoint&quot;">​</a></h2><p><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints?hl=zh-cn" target="_blank" rel="noreferrer">使用断点暂停代码</a></p><h2 id="i直接在控制台安装-npm-包" tabindex="-1"><strong>$i</strong>直接在控制台安装 npm 包 <a class="header-anchor" href="#i直接在控制台安装-npm-包" aria-label="Permalink to &quot;**$i**直接在控制台安装 npm 包&quot;">​</a></h2><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fconsole-importer%2Fhgajpakhafplebkdljleajgbpdmplhie%2Frelated" target="_blank" rel="noreferrer">Console Importer</a> 就是这么一个插件，用来在控制台直接安装<strong>npm</strong>包。 <img src="https://cdn.nlark.com/yuque/0/2022/png/292785/1654571103353-aece2262-4836-4a81-a426-c966cd117a0e.png#clientId=uc14f4d5d-c842-4&amp;from=paste&amp;height=719&amp;id=u280ff3ae&amp;name=image.png&amp;originHeight=719&amp;originWidth=1304&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=256843&amp;status=done&amp;style=none&amp;taskId=u22880a3b-1f8b-4fe2-88e3-0b06f4d8360&amp;title=&amp;width=1304" alt="image.png"></p><h2 id="快速切换主题" tabindex="-1">快速切换主题 <a class="header-anchor" href="#快速切换主题" aria-label="Permalink to &quot;快速切换主题&quot;">​</a></h2><ol><li><strong>cmd + shift + p</strong> 执行<strong>Command</strong>命令</li><li>输入<strong>Switch to dark theme</strong>或者<strong>Switch to light theme</strong>进行主题切换</li></ol><h2 id="控制台引用上一次执行的结果" tabindex="-1">**$_**控制台引用上一次执行的结果 <a class="header-anchor" href="#控制台引用上一次执行的结果" aria-label="Permalink to &quot;**$\\_**控制台引用上一次执行的结果&quot;">​</a></h2><p>使用**$_**引用上一次操作的结果，不用每次都复制一遍</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 第1步&#39;fatfish&#39;.split(&#39;&#39;) // [&#39;f&#39;, &#39;a&#39;, &#39;t&#39;, &#39;f&#39;, &#39;i&#39;, &#39;s&#39;, &#39;h&#39;]</span></span>
<span class="line"><span>// 第2步 $_.reverse() // [&#39;h&#39;, &#39;s&#39;, &#39;i&#39;, &#39;f&#39;, &#39;t&#39;, &#39;a&#39;, &#39;f&#39;]</span></span>
<span class="line"><span>// 第3步 $_.join(&#39;&#39;) // hsiftaf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="截取一张全屏的网页" tabindex="-1">截取一张全屏的网页 <a class="header-anchor" href="#截取一张全屏的网页" aria-label="Permalink to &quot;截取一张全屏的网页&quot;">​</a></h2><ol><li>准备好需要截屏的内容</li><li><strong>cmd + shift + p</strong> 执行<strong>Command</strong>命令</li><li>输入<strong>Capture full size screenshot</strong> 按下回车</li></ol><h2 id="在控制台快速发起请求" tabindex="-1">在控制台快速发起请求 <a class="header-anchor" href="#在控制台快速发起请求" aria-label="Permalink to &quot;在控制台快速发起请求&quot;">​</a></h2><p>还是联调或修 BUG 的场景，针对同样的请求，有时候需要<strong>修改入参</strong>重新发起，有啥快捷方式？</p><ol><li>选中<strong>Network</strong></li><li>点击<strong>Fetch/XHR</strong></li><li>选择<strong>Copy as fetch</strong></li><li>控制台粘贴代码</li><li>修改参数，回车搞定</li></ol><h2 id="一键重新发起请求" tabindex="-1">一键重新发起请求 <a class="header-anchor" href="#一键重新发起请求" aria-label="Permalink to &quot;一键重新发起请求&quot;">​</a></h2><p>在与后端接口联调或排查线上 BUG 时，你是不是也经常听到他们说这句话：<strong>你再发起一次请求试试，我这边看下为啥出错了！</strong> 重发请求，这有一种简单到发指的方式</p><ol><li>选中<strong>Network</strong></li><li>点击<strong>Fetch/XHR</strong></li><li>选择要重新发送的请求</li><li>右键选择<strong>Replay XHR</strong></li></ol>`,31),n=[r];function s(l,p,h,m,c,d){return t(),e("div",null,n)}const u=a(i,[["render",s]]);export{b as __pageData,u as default};
