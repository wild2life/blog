import{_ as s,h as i,o as a,aa as n}from"./chunks/framework.BsAE-16a.js";const F=JSON.parse('{"title":"前端Docker部署","description":"","frontmatter":{},"headers":[],"relativePath":"daily-notes/issue-26.md","filePath":"daily-notes/issue-26.md","lastUpdated":null}'),l={name:"daily-notes/issue-26.md"},e=n(`<h1 id="前端docker部署" tabindex="-1">前端Docker部署 <a class="header-anchor" href="#前端docker部署" aria-label="Permalink to &quot;前端Docker部署&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/wild2life/daily-notes/issues/26" target="_blank" rel="noreferrer">前端Docker部署 | GitHub</a></p></div><h2 id="_1-背景" tabindex="-1">1. 背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;1. 背景&quot;">​</a></h2><p>在传统前端部署中，我们常常遇到以下问题：</p><ul><li>环境不一致导致“本地能跑，生产报错”</li><li>手动上传构建产物效率低，容易出错</li><li>回滚困难，版本不可追踪</li></ul><p>为了解决这些问题，我们采用了 <strong>Docker 容器化部署 + 火山云容器服务</strong> 的方案，将前端项目打包成镜像，并通过镜像标签管理不同环境（测试/正式），实现快速、一致、可回滚的部署。</p><h2 id="_2-技术栈" tabindex="-1">2. 技术栈 <a class="header-anchor" href="#_2-技术栈" aria-label="Permalink to &quot;2. 技术栈&quot;">​</a></h2><ul><li><strong>Docker</strong>：前端镜像构建和容器化运行</li><li><strong>火山云 CR（容器镜像仓库）</strong>：存储镜像，支持 dev / latest 标签</li><li><strong>火山云容器服务</strong>：容器运行环境，可手动或自动部署镜像</li><li><strong>pnpm / Node.js / nginx</strong>：前端构建和服务</li></ul><h2 id="_3-镜像构建流程" tabindex="-1">3. 镜像构建流程 <a class="header-anchor" href="#_3-镜像构建流程" aria-label="Permalink to &quot;3. 镜像构建流程&quot;">​</a></h2><h3 id="_3-1-dockerfile-设计" tabindex="-1">3.1 Dockerfile 设计 <a class="header-anchor" href="#_3-1-dockerfile-设计" aria-label="Permalink to &quot;3.1 Dockerfile 设计&quot;">​</a></h3><p>采用 <strong>多阶段构建</strong>：</p><ol><li><p><strong>Builder 阶段</strong>：</p><ul><li>使用 Node 镜像构建前端代码</li><li>安装依赖并执行 <code>pnpm run build</code></li><li>输出静态文件</li></ul></li><li><p><strong>Production 阶段</strong>：</p><ul><li>使用 nginx 镜像作为基础运行环境</li><li>拷贝构建产物到 nginx 的 <code>html</code> 目录</li><li>配置 nginx 模板并注入动态环境变量 <code>API_HOST</code></li><li>镜像打标（Label）包含： <ul><li><code>maintainer=&quot;Zhang Ye &lt;zhangye@company.com&gt;&quot;</code></li><li><code>build.tag</code>、<code>build.version</code>、<code>build.time</code></li></ul></li></ul></li></ol><h3 id="_3-2-构建脚本" tabindex="-1">3.2 构建脚本 <a class="header-anchor" href="#_3-2-构建脚本" aria-label="Permalink to &quot;3.2 构建脚本&quot;">​</a></h3><p>使用 <code>build-local-docker-image.sh</code>：</p><ul><li>根据传入参数（<code>dev</code> / <code>latest</code>）设置 <code>API_HOST</code> 和镜像标签</li><li>自动获取 Git commit 和构建时间打入镜像元数据</li><li>执行 <code>docker build</code> 并推送到火山云 CR</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build-local-docker-image.sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TAG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REMOTE_IMAGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$REGISTRY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$APP_NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 根据环境设置 API_HOST</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    API_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bs-server-dev&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    API_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bs-server&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 版本信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BUILD_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rev-parse </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--short</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;local&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BUILD_TIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">date</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +&quot;%Y-%m-%dT%H:%M:%SZ&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../../</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        --build-arg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API_HOST=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${API_HOST} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        --build-arg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BUILD_TAG=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${TAG} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        --build-arg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BUILD_VERSION=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${BUILD_VERSION} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        --build-arg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BUILD_TIME=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${BUILD_TIME} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        -t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${IMAGE_NAME} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;❌ build_image failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>示例命令：</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scripts:&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;build:docker:prod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./scripts/deploy/build-local-docker-image.sh latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;build:docker:test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./scripts/deploy/build-local-docker-image.sh dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_4-部署流程" tabindex="-1">4. 部署流程 <a class="header-anchor" href="#_4-部署流程" aria-label="Permalink to &quot;4. 部署流程&quot;">​</a></h2><h3 id="_4-1-手动部署" tabindex="-1">4.1 手动部署 <a class="header-anchor" href="#_4-1-手动部署" aria-label="Permalink to &quot;4.1 手动部署&quot;">​</a></h3><p>在火山云容器服务中：</p><ol><li>选择目标服务</li><li>点击 重新部署</li></ol><ul><li>自动拉取最新镜像（例如 bs_web:dev）</li><li>停止旧容器</li><li>启动新容器</li><li>健康检查通过后，流量切换到新容器</li></ul><h3 id="_4-2-背后机制" tabindex="-1">4.2 背后机制 <a class="header-anchor" href="#_4-2-背后机制" aria-label="Permalink to &quot;4.2 背后机制&quot;">​</a></h3><p>重新部署等同于</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imotion-cn-beijing.cr.volces.com/ci-infra/bs_web:dev</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8010</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bs_web:dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>整个过程由火山云自动完成。</p><h3 id="_4-3-自动化部署-可选" tabindex="-1">4.3 自动化部署（可选） <a class="header-anchor" href="#_4-3-自动化部署-可选" aria-label="Permalink to &quot;4.3 自动化部署（可选）&quot;">​</a></h3><p>可通过 CI/CD 或 API 实现：</p><ul><li>镜像推送完成 → 自动调用火山云容器服务接口 → 滚动更新容器</li><li>无需手动点击，真正实现 持续交付（CD）</li></ul><h2 id="_5-部署优势" tabindex="-1">5. 部署优势 <a class="header-anchor" href="#_5-部署优势" aria-label="Permalink to &quot;5. 部署优势&quot;">​</a></h2><table><thead><tr><th>优势</th><th>说明</th></tr></thead><tbody><tr><td>环境一致</td><td>镜像包含 Node、Nginx、构建产物，开发/测试/生产环境完全一致</td></tr><tr><td>快速部署</td><td>拉取镜像即可运行，秒级上线</td></tr><tr><td>可回滚</td><td>镜像版本可控，切换标签即可回滚</td></tr><tr><td>自动化</td><td>CI/CD 流水线可自动构建推送和部署</td></tr><tr><td>版本追踪</td><td>镜像 Label 打标，包括构建时间和 Git commit</td></tr></tbody></table><h2 id="_6-可优化方向" tabindex="-1">6. 可优化方向 <a class="header-anchor" href="#_6-可优化方向" aria-label="Permalink to &quot;6. 可优化方向&quot;">​</a></h2><ul><li>为每个镜像增加环境标识（Label 或 API_HOST）</li><li>在 CI/CD 流水线中自动触发重新部署</li><li>前端代码读取构建时注入的环境变量，动态展示环境信息</li><li>支持多环境镜像标签策略（dev / staging / prod）</li></ul>`,34),t=[e];function h(p,k,r,d,o,c){return a(),i("div",null,t)}const u=s(l,[["render",h]]);export{F as __pageData,u as default};
